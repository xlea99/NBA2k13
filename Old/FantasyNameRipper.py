from selenium import webdriver
import time
import os


nameListsFolderPath = "S:\\Coding\\Projects\\NBA2k13\\Data\\NameLists\\"
baseURL = "https://www.fantasynamegenerators.com/"

allNameLists = ["alien",
"amazon",
"anansi",
"angel",
"animal-species",
"animatronic",
"anime-character",
"anthousai",
"apocalypse-mutant",
"artificial-intelligence",
"bandit",
"banshee",
"barbarian",
"basilisk",
"birdfolk",
"bluecap",
"bounty-hunter",
"brownie",
"caladrius",
"cat-people-nekojin",
"cavemen",
"centaur",
"christmas-elf",
"cockatrice",
"code",
"cowboy",
"cyberpunk",
"dark-elf",
"death",
"death-worm",
"demon",
"detective",
"dracaenae",
"dragon",
"chinese-dragon",
"japanese-dragon",
"dragonkin",
"druid-grove",
"dryad",
"dwarf",
"elemental",
"elf",
"ent",
"evil",
"faery-court",
"fairy",
"fantasy-animal",
"creature",
"fantasy-race",
"fursona",
"futuristic",
"gargoyle",
"genie",
"ghost",
"ghoul",
"giant",
"gnoll",
"gnome",
"goblin",
"god",
"golem",
"gorgon",
"graeae",
"griffin",
"grootslang",
"guardian",
"half-elf",
"half-orc",
"harpy",
"hellhound",
"hobbit",
"horse",
"hydra",
"ifrit",
"imp",
"jackalope-wolpertinger",
"jotunn",
"kaiju",
"killer",
"kitsune",
"knight",
"kobold",
"lamia",
"legendary-creature",
"lich",
"lizardfolk",
"mad-scientist",
"magic-user",
"manananggal",
"manticore",
"mecha",
"medieval",
"mermaid",
"minotaur",
"mirrored-twin",
"monster",
"moon-rabbit",
"morgen",
"mutant-species",
"naga",
"necromancer",
"nephilim",
"ninja",
"non-magic-user",
"norse-raven",
"nymph",
"ogre",
"orc",
"pegasus",
"phoenix",
"pirate",
"pixie",
"plague-doctor",
"prophet",
"puppet",
"quetzalcoatl",
"rakshasa",
"robot",
"roc",
"satyr-faun",
"sea-creature",
"selkie",
"servant",
"shapeshifter",
"siren",
"slave",
"species",
"sphinx",
"spiderfolk",
"steampunk",
"succubus",
"hero",
"superhero-team",
"villain",
"sylph",
"titan",
"troll",
"unicorn",
"valkyrie",
"vampire",
"vampire-clan",
"werewolf",
"werewolf-pack",
"witch",
"witch-coven",
"wizard",
"world-defender",
"world-destroyer",
"wyvern",
"xana",
"yeti",
"zaratan",
"20th-century-english",
"aboriginal",
"african-american",
"afrikaner",
"akan",
"akkadian",
"albanian",
"algerian",
"amazigh",
"amish",
"ancient-greek",
"anglo-saxon",
"muslim",
"aragonese",
"argentinian",
"armenian",
"assamese",
"assyrian",
"asturian",
"australian",
"austrian",
"azerbaijani",
"aztec",
"babylonian",
"balochi",
"bashkir",
"basotho",
"basque",
"belarusian",
"belgian",
"bengali",
"biblical",
"bosniak",
"brazilian",
"bulgarian",
"burmese-myanmar",
"byzantine",
"cajun",
"cameroonian",
"canadian",
"catalan",
"celtic-breton",
"celtic-gaul",
"irish",
"manx",
"celtic",
"celtic-welsh",
"chechen",
"chinese",
"circassian",
"colonial-american",
"cornish",
"cosmic",
"croatian",
"cypriot",
"czech",
"danish",
"dari",
"dutch",
"edwardian",
"egyptian",
"modern-egyptian",
"elizabethan",
"english",
"british-english",
"enochian",
"estonian",
"ethiopian",
"etruscan",
"faroese",
"filipino",
"finnish",
"frankish",
"french",
"frisian",
"galician",
"georgian",
"german",
"gothic",
"greek",
"gujarati",
"haitian",
"hausa",
"hawaiian",
"hebrew",
"jewish",
"hellenic",
"hillbilly",
"hindi",
"hippie",
"hispanic",
"hittite",
"hmong",
"hungarian",
"icelandic",
"igbo",
"indonesian",
"inuit",
"modern-irish",
"italian",
"jamaican",
"japanese",
"edo-japanese",
"kazakh",
"keralite",
"khmer",
"kikuyu",
"korean",
"kurdish",
"kyrgyz",
"latin",
"laotian",
"latvian",
"lithuanian",
"luo",
"luxembourgish",
"macedonian",
"malagasy",
"malaysian",
"malian",
"maltese",
"mandinka",
"maori",
"marathi",
"marwari",
"mayan",
"moldovan",
"mongolian",
"montenegrin",
"moorish",
"mormon-latter-day-saints",
"moroccan",
"native-american",
"nature",
"ndebele",
"nepalese",
"norman",
"norwegian",
"old-high-german",
"oriya",
"oromo",
"ossetian",
"ottoman",
"pakistani",
"palestinian",
"papal",
"papuan",
"pashtun",
"persian",
"phoenician",
"pictish",
"polish",
"portuguese",
"puerto-rican",
"punjabi",
"puritan",
"quebecois",
"quechua",
"roma-gypsy",
"roman",
"romanian",
"posh",
"royalty",
"russian",
"sami",
"samoan",
"sanskrit",
"sarmatian",
"serbian",
"modern-scottish",
"shakespearean",
"shona",
"sikh",
"sindhi",
"sinhalese",
"slavic",
"slovak",
"slovenian",
"somali",
"spanish",
"stage",
"suebi",
"sumerian",
"sundanese",
"swabian",
"swahili",
"swedish",
"swiss",
"tahitian",
"tajik",
"tamil",
"tatar",
"telugu",
"thai",
"tibetan",
"trinidad-tobago",
"tshiluba",
"tswana",
"tuareg",
"turkish",
"twin",
"ukrainian",
"urdu",
"uyghur",
"uzbek",
"victorian",
"vietnamese",
"viking",
"modern-welsh",
"xhosa",
"xitsonga",
"yakut",
"yoruba",
"zambian",
"zazaki",
"zoroastrian",
"zulu",
"amusement-park",
"antique-store",
"arcade",
"asylum",
"bakery",
"bank",
"battle-arena",
"beach",
"blacksmith",
"bookstore",
"botanical-garden",
"brewery",
"bridge",
"cafe",
"camp",
"casino",
"castle",
"cave",
"circus",
"city-district",
"civilization",
"cliff",
"company",
"continent",
"coral-reef",
"country",
"craft-store",
"dating-agency",
"day-care",
"land",
"dimension",
"dungeon",
"farm",
"film-studio",
"fire-land",
"flower-shop",
"forest",
"galaxy",
"game-studio",
"glacier",
"grassland",
"graveyard",
"gym",
"harbor",
"headquarters",
"hideout",
"hospital",
"hotel",
"island",
"isthmus",
"jungle",
"kingdom",
"laboratory",
"lake",
"library",
"lighthouse",
"mage-tower",
"magic-school",
"magic-shop",
"mansion",
"mill",
"mining-company",
"mountain",
"mountain-pass",
"museum",
"music-store",
"nebula",
"nightclub",
"norse-world",
"oasis",
"water",
"orphanage",
"outpost",
"park",
"pet-business",
"pirate-cove",
"pizzeria",
"planet",
"plantation",
"plaza",
"prison",
"quasar",
"realm",
"restaurant",
"river",
"road",
"ruin",
"school",
"shop",
"sky-island",
"snowland",
"spa",
"space-colony",
"stadium",
"star",
"steampunk-house",
"street",
"swamp",
"tattoo-parlor",
"inn",
"temple",
"theater",
"tower",
"void",
"volcano",
"waterfall",
"world",
"afterlife",
"airline",
"alchemy-ingredient",
"alliance",
"animal-group",
"anime-manga",
"apocalypse",
"artifact",
"artwork",
"attack-move",
"anime-attack",
"award",
"battle",
"board-game",
"bouquet",
"boxer",
"brand",
"bug-species",
"candy",
"card-game",
"chivalric-order",
"clothing-brand",
"clown",
"evil-clown",
"color",
"computer-virus",
"console",
"constellation",
"council",
"crop",
"cult",
"currency",
"curse",
"dance",
"date",
"disease",
"magical-disease",
"scientific-disease",
"dinosaur",
"dj",
"drink",
"drag-queen",
"drug",
"enchantment",
"gear-enchantment",
"evil-group",
"magical-plant",
"magical-tree",
"profession",
"food",
"fantasy-food",
"fraternity-sorority",
"fruit-vegetable",
"fungi",
"game-engine",
"game-soundtrack",
"gang",
"gem-mineral",
"guild",
"hacker",
"heist",
"herb",
"holiday",
"holy-book",
"human-species",
"instrument",
"invention",
"jpop-group",
"jewelry",
"language",
"law-enforcement-agency",
"kpop-group",
"magazine",
"magic-school-book",
"martial-arts",
"mascot",
"material",
"measurement",
"medicine",
"mercenary-band",
"metal",
"meteor",
"military-division",
"military-honor",
"military-operation",
"military-rank",
"mobster",
"molecule",
"motorcycle-club",
"motorsport-race",
"album",
"band",
"musician",
"mutant-plant",
"natural-disaster",
"necronomicon",
"newspaper",
"noble-house",
"pirate-crew",
"plague",
"tree",
"class",
"poison",
"political-party",
"post-apocalyptic-society",
"potion",
"racer",
"railway",
"rank",
"rebellion",
"record-label",
"religion",
"rune",
"satellite",
"scientific-bird",
"scientific-creature",
"scientific-device",
"plant",
"season",
"order",
"siege-engine",
"software",
"space-fleet",
"spell",
"sport",
"sports-team",
"squad",
"steampunk-walker",
"supercomputer",
"teleportation",
"throne",
"time-period",
"title",
"treaty",
"tribal",
"tribe",
"video-game",
"vocal-group",
"web-series",
"wine",
"world-tree",
"wrestler",
"wrestling-move",
"a-court-of-thorns-and-roses",
"animal-crossing-town",
"arthurian",
"attack-on-titan",
"bayonetta",
"bionicle",
"borderlands",
"creepypasta",
"dark-souls",
"demon-slayer",
"digimon",
"dragonriders-of-pern",
"fullmetal-alchemist",
"hollow-knight",
"homestuck",
"how-to-train-your-dragon",
"hunger-games",
"hyborian",
"invader-zim",
"jojo-bizarre-adventure",
"lovecraftian",
"maze-runner",
"megaman",
"mortal-kombat",
"my-little-pony",
"avatar",
"one-punch-man",
"pacific-rim",
"pokemon",
"power-rangers-team",
"predator-yautja",
"rwby",
"shadowhunter-chronicles",
"shadowrun",
"skulduggery-pleasant",
"skylanders",
"starcraft",
"stormlight-archive",
"super-sentai",
"throne-of-glass",
"thundercats",
"tokyo-ghoul",
"transformers",
"tsolyani",
"warrior-cat",
"wheel-of-time",
"wings-of-fire"]

for nameList in allNameLists:
    if(os.path.exists(nameListsFolderPath + nameList + "_first.txt")):
        print("passed " + nameList + ", as it's already been scraped")
        continue

    ffOptions = webdriver.FirefoxOptions()
    ffOptions.set_headless(True)
    browser = webdriver.Firefox(options=ffOptions)

    #browser.minimize_window()
    browser.get(baseURL + nameList + "-names.php")

    masterFirst = []
    masterLast = []

    time.sleep(3)
    maleNamesButtonStr1 = "//div/div/div/div/input[@type='button'][@value='Male names']"
    maleNamesButtonStr2 = "//div/div/div/div/input[@type='button'][@value='Get male names']"
    maleNamesButtonStr3 = "//div/div/div/div/input[@type='button'][@value='Get " + nameList + " names']"
    maleNamesButtonStr4 = "//div/div/div/div/input[@type='button'][@value='Get names']"
    maleNamesButtonStr5 = "//div/div/div/div/input[@type='button'][contains(@value,'et')][contains(@value,'names)]"
    resultListStr = "//div/div/div/div[@id='nameGen']/div[@id='placeholder']/div[@id='result']"
    try:
        maleNamesButton = browser.find_element_by_xpath(maleNamesButtonStr1)
    except:
        try:
            maleNamesButton = browser.find_element_by_xpath(maleNamesButtonStr2)
        except:
            try:
                maleNamesButton = browser.find_element_by_xpath(maleNamesButtonStr3)
            except:
                try:
                    maleNamesButton = browser.find_element_by_xpath(maleNamesButtonStr4)
                except:
                    try:
                        maleNamesButton = browser.find_element_by_xpath(maleNamesButtonStr5)
                    except:
                        print("skipped " + nameList)
                        browser.close()
                        continue
    firstNameFile = open(nameListsFolderPath + nameList + "_first.txt",'w',encoding="UTF-16")
    lastNameFile = open(nameListsFolderPath + nameList + "_last.txt",'w',encoding="UTF-16")

    listOfNames = []
    counter = 0
    failed = False
    while(((len(masterFirst) < 2000) or (len(masterLast) < 2000)) and (counter < 300)):
        counter += 1
        maleNamesButton.click()
        for i in range(10):
            try:
                fullNameListStr = browser.find_element_by_xpath(resultListStr).text
            except:
                time.sleep(1)
                if(i == 9):
                    failed = True
                    break

        runningString = ""
        for character in fullNameListStr:
            if(character == "\n"):
                listOfNames.append(runningString)
                runningString = ""
            else:
                runningString += character
        listOfNames.append(runningString)
        runningString = ""

        #print(listOfNames)
        for fullName in listOfNames:
            foundFirstName = ""
            foundLastName = ""
            foundSpace = False
            for char in fullName:
                if(foundSpace == True):
                    foundLastName += char
                else:
                    if(char == " "):
                        foundSpace = True
                    else:
                        foundFirstName += char

            if(foundFirstName not in masterFirst):
                masterFirst.append(foundFirstName)
            if(foundLastName not in masterLast):
                masterLast.append(foundLastName)

        listOfNames = []


    masterFirst.sort()
    masterLast.sort()

    for firstName in masterFirst:
        firstNameFile.write(firstName)
        firstNameFile.write("\n")
    for lastName in masterLast:
        lastNameFile.write(lastName)
        lastNameFile.write("\n")

    firstNameFile.close()
    lastNameFile.close()

    browser.close()
    if(failed):
        print("failed to read " + nameList + " as program could not locate result box on page.")
    else:
        print("successfully read " + nameList + ": " + str(len(masterFirst)) + " | " + str(len(masterLast)))



'''
browser = webdriver.Firefox()
browser.get("https://www.fantasynamegenerators.com/puerto-rican-names.php")
input("OPEN THE LIST HOMIE")
allLists = browser.find_elements_by_xpath("//ol[@class='mainOl']/li/a")

for thisList in allLists:
    url = thisList.get_attribute("href")
    if("https://www.fantasynamegenerators.com/" in url):
        if("-names" in url):
            new = url.split("https://www.fantasynamegenerators.com/")[1]
            print(new.split("-names.php")[0])
'''